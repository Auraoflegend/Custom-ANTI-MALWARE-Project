import threading
import os
import subprocess
from tkinter import *
from tkinter import ttk, filedialog, messagebox
from signature import full_scan, folderscan  # Import the scanning functions

root = Tk()
root.geometry("950x600+450+120")
root.maxsize(950, 600)
root.minsize(950, 600)
root.title("Anti-Malware Software")

def update_progress_label(file_path_label, progress_bar, percent_label, scanned_files, total_files, file_path):
    if total_files > 0:
        progress_percentage = (scanned_files / total_files) * 100
        file_path_label.config(text=f"Hashing and comparing: {file_path}")
        progress_bar['value'] = min(progress_percentage, 100)
        percent_label.config(text=f"{int(progress_percentage)}% Completed")
        root.update_idletasks()

def display_malware_found(malware_found, parent_window):
    """Display the found malware in a new window."""
    delete_window = Toplevel(parent_window)
    delete_window.title("Select Malware to Keep")
    delete_window.geometry("600x400")

    list_frame = Frame(delete_window)
    list_frame.pack(pady=10)

    scrollbar = Scrollbar(list_frame)
    scrollbar.pack(side=RIGHT, fill=Y)

    malware_listbox = Listbox(list_frame, selectmode=MULTIPLE, yscrollcommand=scrollbar.set, width=80, height=15)
    for name, path in malware_found:
        malware_listbox.insert(END, f"{name} - {path}")
    malware_listbox.pack(side=LEFT, fill=BOTH)

    scrollbar.config(command=malware_listbox.yview)

    def open_location(event):
        try:
            selected_index = malware_listbox.curselection()[0]  # Get the first selected item
            selected_path = malware_found[selected_index][1]  # Get the path of that item
            if os.path.exists(selected_path):
                if os.path.isdir(selected_path):
                    subprocess.Popen(f'explorer "{selected_path}"')  # Open folder
                else:
                    subprocess.Popen(f'explorer /select,"{selected_path}"')  # Select file in Explorer
            else:
                messagebox.showwarning("Warning", "The selected file/folder does not exist.")
        except IndexError:
            pass  # No selection

    # Bind the double-click event
    malware_listbox.bind("<Double-1>", open_location)

    def delete_selected():
        selected_indices = malware_listbox.curselection()
        selected_paths = {malware_found[i][1] for i in selected_indices}

        if not selected_paths:
            messagebox.showwarning("Warning", "No malware selected to delete.")
            return

        if messagebox.askyesno("Confirm Deletion", "Are you sure you want to delete the unselected malware?"):
            errors = []
            for name, path in malware_found:
                if path not in selected_paths:
                    try:
                        if os.path.isfile(path):  # Ensure it's a file before deleting
                            os.remove(path)
                        print(f"Removed {path}")
                    except Exception as e:
                        errors.append(f"Failed to remove {path}: {e}")

            if errors:
                messagebox.showerror("Malware Removal Errors", "\n".join(errors))
            else:
                messagebox.showinfo("Malware Removal", "Unselected malware files have been successfully removed!")
            delete_window.destroy()  # Close the delete selection window
        else:
            messagebox.showinfo("Deletion Cancelled", "No files were deleted.")

    delete_button = Button(delete_window, text="Delete Unselected Malware", command=delete_selected)
    delete_button.pack(pady=20)

def scan_full_device():
    new_window = Toplevel(root)
    new_window.title("Full Device Scan")
    new_window.geometry("650x500")

    label = Label(new_window, text="Running Full Device Scan...", font=("Arial", 16, "bold"))
    label.pack(pady=15)

    current_file_label = Label(new_window, text="Currently Scanning: None", font=("Arial", 14))
    current_file_label.pack(pady=10)

    total_files_label = Label(new_window, text="Total Files to Scan: 0", font=("Arial", 12))
    total_files_label.pack(pady=5)


    progress_bar = ttk.Progressbar(new_window, orient=HORIZONTAL, length=500, mode='determinate')
    progress_bar.pack(pady=10)

    percent_label = Label(new_window, text="0% Completed", font=("Arial", 14))
    percent_label.pack(pady=10)

    total_files = sum(len(files) for _, _, files in os.walk("C:/"))  # Count total files
    total_files_label.config(text=f"Total Files to Scan: {total_files}")

    if total_files == 0:
        messagebox.showinfo("Scan Complete", "No files to scan.")
        new_window.destroy()
        return

    scanned_files = 0
    detected_malware = []  # To store malware details

    def update_progress(file_path):
        nonlocal scanned_files
        scanned_files += 1
        update_progress_label(current_file_label, progress_bar, percent_label, scanned_files, total_files, file_path)

    def run_scan():
        nonlocal detected_malware
        detected_malware = full_scan(update_progress)
        Label(new_window, text="Scan Completed!", font=("Arial", 14), fg="green").pack(pady=20)

        if detected_malware:
            Label(new_window, text="Malware found!", font=("Arial", 14), fg="red").pack(pady=10)
            display_malware_found(detected_malware, new_window)
        else:
            Label(new_window, text="No malware detected.", font=("Arial", 12), fg="green").pack(pady=20)

        Button(new_window, text="Close", command=new_window.destroy).pack(pady=20)

    threading.Thread(target=run_scan).start()

def scan_folder():
    new_window = Toplevel(root)
    new_window.title("Folder Scan")
    new_window.geometry("650x500")

    label = Label(new_window, text="Select a folder to scan:", font=("Arial", 16, "bold"))
    label.pack(pady=20)

    folder_path = filedialog.askdirectory()

    if folder_path:
        label_folder = Label(new_window, text=f"Scanning folder: {folder_path}", font=("Arial", 14))
        label_folder.pack(pady=10)

        total_files_label = Label(new_window, text="Total Files to Scan: 0", font=("Arial", 12))
        total_files_label.pack(pady=5)

        current_file_count_label = Label(new_window, text="Currently Scanning: 0", font=("Arial", 12))  # New label for current file count
        current_file_count_label.pack(pady=5)


        progress_bar = ttk.Progressbar(new_window, orient=HORIZONTAL, length=500, mode='determinate')
        progress_bar.pack(pady=10)

        percent_label = Label(new_window, text="0% Completed", font=("Arial", 14))
        percent_label.pack(pady=10)

        total_files = sum(len(files) for _, _, files in os.walk(folder_path))  # Count total files
        total_files_label.config(text=f"Total Files to Scan: {total_files}")

        if total_files == 0:
            messagebox.showinfo("Scan Complete", "No files to scan.")
            new_window.destroy()
            return

        scanned_files = 0
        detected_malware = []  # To store malware details

        def update_progress(file_path):
            nonlocal scanned_files
            scanned_files += 1
            current_file_count_label.config(text=f"Currently Scanning: {scanned_files}")  # Update current file count
            update_progress_label(label_folder, progress_bar, percent_label, scanned_files, total_files, file_path)

        def run_scan():
            nonlocal detected_malware
            detected_malware = folderscan(folder_path, update_progress)
            Label(new_window, text="Folder Scan Completed!", font=("Arial", 14), fg="green").pack(pady=20)

            if detected_malware:
                Label(new_window, text="Malware found!", font=("Arial", 14), fg="red").pack(pady=10)
                display_malware_found(detected_malware, new_window)
            else:
                Label(new_window, text="No malware detected.", font=("Arial", 12), fg="green").pack(pady=20)

            Button(new_window, text="Close", command=new_window.destroy).pack(pady=20)

        threading.Thread(target=run_scan).start()

# GUI for selecting scan type
def scan_signature_based():
    scan_window = Toplevel(root)
    scan_window.title("Signature Based Scan")
    scan_window.geometry("400x200")

    Label(scan_window, text="Select Scan Type:", font=("Arial", 16)).pack(pady=20)

    full_scan_button = Button(scan_window, text="Full Device Scan", command=scan_full_device)
    full_scan_button.pack(pady=10)

    folder_scan_button = Button(scan_window, text="Folder Scan", command=scan_folder)
    folder_scan_button.pack(pady=10)

# Signature Based Scanning Option
signature_scan_button = Button(root, text="Signature Based Scanning", command=scan_signature_based, font=("Arial", 16))
signature_scan_button.pack(pady=20)

root.mainloop()
